./001_mogoweb_365browser/app/src/main/java/org/chromium/chrome/browser/installedapp/PackageHash.java
        Key key = new SecretKeySpec(salt, "HmacSHA256");
./001_mogoweb_365browser/app/src/main/java/org/chromium/chrome/browser/webapps/WebappAuthenticator.java
                return new SecretKeySpec(keyBytes, algorithmName);
./001_mogoweb_365browser/app/src/main/java/org/chromium/content/browser/crypto/CipherFactory.java
            Key bundledKey = new SecretKeySpec(wrappedKey, "AES");
./002_jackyandroid_androidchromium/app/src/main/java/org/chromium/chrome/browser/webapps/WebappAuthenticator.java
                return new SecretKeySpec(keyBytes, algorithmName);
./005_f-droid_fdroidclient/app/src/full/java/kellinwood/security/zipsigner/optional/JKS.java
            return new SecretKeySpec(key, alias);
./005_f-droid_fdroidclient/app/src/full/java/kellinwood/security/zipsigner/optional/PasswordObfuscator.java
        skeySpec = new SecretKeySpec(x.getBytes(), "AES");
            SecretKeySpec skeySpec = new SecretKeySpec(x.getBytes(), "AES");
./007_playerone-id_eoscommander/app/src/main/java/io/plactal/eoscommander/crypto/util/CryptUtil.java
            SecretKey secureKey = new SecretKeySpec(key, "AES");
            SecretKey secureKey = new SecretKeySpec(key, "AES");
./008_nextcloud_android/src/main/java/com/owncloud/android/utils/EncryptionUtils.java
        Key key = new SecretKeySpec(encryptionKeyBytes, AES);
        Key key = new SecretKeySpec(encryptionKeyBytes, AES);
        Key key = new SecretKeySpec(encryptionKeyBytes, AES);
        Key key = new SecretKeySpec(encryptionKeyBytes, AES);
        SecretKeySpec key = new SecretKeySpec(tmp.getEncoded(), AES);
        SecretKeySpec key = new SecretKeySpec(tmp.getEncoded(), AES);
./009_haiwen_seadroid/app/src/main/java/com/seafile/seadroid2/crypto/Crypto.java
        SecretKey derivedKey = new SecretKeySpec(key, "AES");
        SecretKey secretKey = new SecretKeySpec(fromHex(encKey), "AES");
        SecretKey realKey = new SecretKeySpec(fromHex(encKey), "AES");
./010_meganz_android/app/src/main/java/mega/privacy/android/app/utils/Util.java
		SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
		SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
./011_nisrulz_android-examples/Encryption/app/src/main/java/github/nisrulz/encryption/AesCbcWithIntegrity.java
                    new SecretKeySpec(confidentialityKey, 0, confidentialityKey.length, CIPHER),
                    new SecretKeySpec(integrityKey, HMAC_ALGORITHM));
        SecretKey integrityKey = new SecretKeySpec(integrityKeyBytes, HMAC_ALGORITHM);
        SecretKey confidentialityKey = new SecretKeySpec(confidentialityKeyBytes, CIPHER);
        SecretKey integrityKey = new SecretKeySpec(integrityKeyBytes, HMAC_ALGORITHM);
./012_ttdevs_android/app/src/test/java/com/ttdevs/android/ExampleUnitTest.java
    public static final SecretKeySpec KEY = new SecretKeySpec(AES_KEY, CIPHER_ALGORITHM);
./012_ttdevs_android/app/src/test/java/com/ttdevs/android/SecurityUtil.java
            SecretKeySpec localSecretKeySpec = new SecretKeySpec(aes_key, "DESede");
//            SecretKeySpec localSecretKeySpec = new SecretKeySpec(aes_key, "DESede");
./012_ttdevs_android/modules/reactive/src/main/java/com/ttdevs/reactive/QiniuConfig.java
        SecretKey secretKey = new SecretKeySpec(key.getBytes(), HMAC_SHA1);
./014_bobomee_android-demos/common/common/src/main/java/com/bobomee/android/common/util/CryptoUtil.java
            SecretKeySpec skeySpec = new SecretKeySpec(key, 0, Math.min(key.length, Cipher.getMaxAllowedKeyLength("AES") / 8), "AES");
            SecretKeySpec skeySpec = new SecretKeySpec(key, 0, Math.min(key.length, Cipher.getMaxAllowedKeyLength("AES") / 8), "AES");
./015_corbinlc_gnurootdebian/bVNC/src/main/java/com/iiordanov/bVNC/PasswordManager.java
        SecretKey key = new SecretKeySpec(keyBytes, "AES");
./015_corbinlc_gnurootdebian/bVNC/src/main/java/com/iiordanov/bVNC/RFBSecurityARD.java
            SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
./015_corbinlc_gnurootdebian/play_licensing/src/main/java/com/google/android/vending/licensing/AESObfuscator.java
            SecretKey secret = new SecretKeySpec(tmp.getEncoded(), "AES");
./015_corbinlc_gnurootdebian/pubkeyGenerator/src/main/java/com/iiordanov/pubkeygenerator/Encryptor.java
				new SecretKeySpec(key, KEY_ALGORITHM),
				new SecretKeySpec(key, KEY_ALGORITHM),
./015_corbinlc_gnurootdebian/pubkeyGenerator/src/main/java/com/iiordanov/pubkeygenerator/PubkeyUtils.java
		SecretKeySpec secretKeySpec = new SecretKeySpec(sha256(secret), "AES");
./016_jecelyin_920-text-editor-v2/common/src/main/java/com/jecelyin/common/utils/EncryptionUtils.java
            c.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(password, SECRET_KEY_ALGORITHM), CBC_SALT_KEY);
            c.init(Cipher.DECRYPT_MODE, new SecretKeySpec(password, SECRET_KEY_ALGORITHM), CBC_SALT_KEY);
            c.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(password, SECRET_KEY_ALGORITHM), CBC_SALT_DATA);
            c.init(Cipher.DECRYPT_MODE, new SecretKeySpec(password, SECRET_KEY_ALGORITHM), CBC_SALT_DATA);
./017_netease_emmagee/src/com/netease/qa/emmagee/utils/EncryptData.java
./018_fmstrat_odm/odm/src/com/nowsci/odm/MCrypt.java
		keyspec = new SecretKeySpec(SecretKey.getBytes(), "AES");
./020_yanzhenjie_nohttp/nohttp/src/main/java/com/yanzhenjie/nohttp/tools/Encryption.java
./021_yanzhenjie_kalle/kalle/src/main/java/com/yanzhenjie/kalle/secure/AESSecret.java
        return new SecretKeySpec(arrB, "AES");
./022_ac-pm_inspeckage/app/src/main/java/mobi/acpm/inspeckage/hooks/CryptoHook.java
./024_qpython-android_qpython/qpython/src/main/java/org/qpython/qpy/console/util/ShortcutEncryption.java
            SecretKey encKey = new SecretKeySpec(decodeBase64(keys[0]), ENC_ALGORITHM);
            SecretKey macKey = new SecretKeySpec(decodeBase64(keys[1]), MAC_ALGORITHM);
./025_samuelhuahui_sun/library/baselibrary/src/main/java/com/ody/library/util/util/EncryptUtils.java
            SecretKeySpec secretKey = new SecretKeySpec(key, algorithm);
            SecretKeySpec keySpec = new SecretKeySpec(key, algorithm);
./026_yandextaxitech_binaryprefs/library/src/main/java/com/ironz/binaryprefs/encryption/AesValueEncryption.java
        SecretKeySpec secretKeySpec = new SecretKeySpec(secretKeyBytes, AES);
        SecretKeySpec secretKeySpec = new SecretKeySpec(secretKeyBytes, AES);
./030_espressifapp_esptouchforandroid/esptouch/src/main/java/com/espressif/iot/esptouch/util/EspAES.java
            SecretKeySpec secretKeySpec = new SecretKeySpec(mKey, "AES");
            SecretKeySpec secretKeySpec = new SecretKeySpec(mKey, "AES");
./031_onyxbits_raccoon4/src/main/java/com/akdeniz/googleplaycrawler/DownloadData.java
			SecretKeySpec key = new SecretKeySpec(decoded, "AES");
./032_litepalframework_litepal/core/src/main/java/org/litepal/util/cipher/AESCrypt.java
        SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
./032_litepalframework_litepal/core/src/main/java/org/litepal/util/cipher/CipherUtil.java
./033_limedroid_xdroidmvp/mvp/src/main/java/cn/droidlover/xdroidmvp/kit/Codec.java
            SecretKey secretKey = new SecretKeySpec(BASE64.decode(key), algorithm.getType());
./036_twitter_twitter-kit-android/twitter-core/src/main/java/com/twitter/sdk/android/core/internal/oauth/OAuth1aParameters.java
            final SecretKey secretKey = new SecretKeySpec(keyBytes, "HmacSHA1");
./037_crossbario_autobahn-java/autobahn/src/main/java/io/crossbar/autobahn/wamp/auth/ChallengeResponseAuth.java
            SecretKeySpec secretKey = new SecretKeySpec(secret.getBytes("UTF-8"), "HmacSHA256");
./039_nisrulz_android-utils/android-utils/src/main/java/github/nisrulz/androidutils/crypto/AesCbcWithIntegrity.java
        SecretKey integrityKey = new SecretKeySpec(integrityKeyBytes, HMAC_ALGORITHM);
        SecretKey confidentialityKey = new SecretKeySpec(confidentialityKeyBytes, CIPHER);
        SecretKey integrityKey = new SecretKeySpec(integrityKeyBytes, HMAC_ALGORITHM);
                    new SecretKeySpec(confidentialityKey, 0, confidentialityKey.length, CIPHER),
                    new SecretKeySpec(integrityKey, HMAC_ALGORITHM));
./040_konloch_bytecode-viewer/src/org/apache/commons/codec/digest/HmacUtils.java
            final SecretKeySpec keySpec = new SecretKeySpec(key, algorithm);
./041_senhlinsh_utils-everywhere/utils/src/main/java/com/linsh/utilseverywhere/EncryptUtils.java
            SecretKeySpec secretKey = new SecretKeySpec(key, algorithm);
            SecretKeySpec keySpec = new SecretKeySpec(key, algorithm);
./042_paypal_selion/client/src/main/java/com/paypal/selion/internal/platform/grid/SauceLabsHelper.java
            SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(), ALGORITHM);
./043_fly803_baseproject/baseproject/src/main/java/com/cg/baseproject/encryption/AESUtils.java
        SecretKey secretKey = new SecretKeySpec(key, "AES");
        SecretKey secretKey = new SecretKeySpec(key, "AES");
./043_fly803_baseproject/baseproject/src/main/java/com/cg/baseproject/encryption/DESUtils.java
        SecretKey secretKey = new SecretKeySpec(key, "DES");
        SecretKey secretKey = new SecretKeySpec(key, "DES");
./043_fly803_baseproject/baseproject/src/main/java/com/cg/baseproject/encryption/EncryptUtils.java
        cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(encryptKey.getBytes(), "AES"));
        cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(decryptKey.getBytes(), "AES"));
./043_fly803_baseproject/baseproject/src/main/java/com/cg/baseproject/encryption/token/JwtUtils.java
        SecretKey key = new SecretKeySpec(encodedKey, 0, encodedKey.length, "AES");// 根据给定的字节数组使用AES加密算法构造一个密钥，使用 encodedKey中的始于且包含 0 到前 leng 个字节这是当然是所有。（后面的文章中马上回推出讲解Java加密和解密的一些算法）
./043_fly803_baseproject/baseproject/src/main/java/com/cg/baseproject/encryption/TripleDESUtils.java
        SecretKey secretKey = new SecretKeySpec(key, "DESede");
        SecretKey secretKey = new SecretKeySpec(key, "DESede");
./044_vondear_rxtool/RxKit/src/main/java/com/vondear/rxtool/RxEncryptTool.java
            SecretKeySpec keySpec = new SecretKeySpec(key, algorithm);
./046_cloudant_sync-android/cloudant-sync-datastore-android-encryption/src/main/java/com/cloudant/sync/datastore/encryption/DPKEncryptionUtil.java
        Key encryptionKey = new SecretKeySpec(key.getEncoded(),"AES");
        Key encryptionKey = new SecretKeySpec(key.getEncoded(),"AES");
./046_cloudant_sync-android/cloudant-sync-datastore-core/src/main/java/com/cloudant/sync/internal/documentstore/encryption/EncryptedAttachmentInputStream.java
                    new SecretKeySpec(keyCopy, EncryptionConstants.KEY_ALGORITHM),
                    new SecretKeySpec(keyCopy, EncryptionConstants.KEY_ALGORITHM),
./046_cloudant_sync-android/cloudant-sync-datastore-core/src/main/java/com/cloudant/sync/internal/documentstore/encryption/EncryptedAttachmentOutputStream.java
                    new SecretKeySpec(keyCopy, EncryptionConstants.KEY_ALGORITHM),
./049_fanhua1994_xbaseandroid/baseandroidcore/src/main/java/com/hengyi/baseandroidcore/encrypt/symmetric/AESUtil.java
            SecretKeySpec key = new SecretKeySpec(enCodeFormat, "AES");
./049_fanhua1994_xbaseandroid/baseandroidcore/src/main/java/com/hengyi/baseandroidcore/xutils/EncryptUtils.java
            SecretKeySpec secretKey = new SecretKeySpec(key, algorithm);
            SecretKeySpec keySpec = new SecretKeySpec(key, algorithm);
./050_azuread_azure-activedirectory-library-for-android/adal/src/androidTest/java/com/microsoft/aad/adal/AcquireTokenRequestTest.java
            SecretKey secretKey = new SecretKeySpec(tempkey.getEncoded(), "AES");
./050_azuread_azure-activedirectory-library-for-android/adal/src/androidTest/java/com/microsoft/aad/adal/AcquireTokenSilentHandlerTest.java
            SecretKey secretKey = new SecretKeySpec(tempkey.getEncoded(), "AES");
./050_azuread_azure-activedirectory-library-for-android/adal/src/androidTest/java/com/microsoft/aad/adal/AuthenticationActivityUnitTest.java
            SecretKey secretKey = new SecretKeySpec(tempkey.getEncoded(), "AES");
./050_azuread_azure-activedirectory-library-for-android/adal/src/androidTest/java/com/microsoft/aad/adal/AuthenticationContextTest.java
            SecretKey secretKey = new SecretKeySpec(tempkey.getEncoded(), "AES");
./050_azuread_azure-activedirectory-library-for-android/adal/src/androidTest/java/com/microsoft/aad/adal/PackageHelperTests.java
            SecretKey secretKey = new SecretKeySpec(tempkey.getEncoded(), "AES");
./050_azuread_azure-activedirectory-library-for-android/adal/src/androidTest/java/com/microsoft/aad/adal/StorageHelperTests.java
        SecretKey secretKey = new SecretKeySpec(tempkey.getEncoded(), "AES");
./050_azuread_azure-activedirectory-library-for-android/adal/src/androidTest/java/com/microsoft/aad/adal/Util.java
        SecretKey secretKey1 = new SecretKeySpec(tempkey1.getEncoded(), "AES");
        SecretKey secretKey2 = new SecretKeySpec(tempkey2.getEncoded(), "AES");
./050_azuread_azure-activedirectory-library-for-android/adal/src/main/java/com/microsoft/aad/adal/StorageHelper.java
        return new SecretKeySpec(rawBytes, KEYSPEC_ALGORITHM);
            return new SecretKeySpec(digester.digest(encodedKey), KEYSPEC_ALGORITHM);
./050_azuread_azure-activedirectory-library-for-android/automationtestapp/src/main/java/com/microsoft/aad/automation/testapp/AndroidAutomationApp.java
                SecretKey secretKey = new SecretKeySpec(tempkey.getEncoded(), "AES");
./050_azuread_azure-activedirectory-library-for-android/userappwithbroker/src/main/java/com/microsoft/aad/adal/example/userappwithbroker/MainActivity.java
                SecretKey secretKey = new SecretKeySpec(tempkey.getEncoded(), "AES");
./052_l123456789jy_lazy/lazylibrary/src/main/java/com/github/lazylibrary/util/AES.java
        SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
            SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
./053_jackwhliu_jackknife/jackknife-util/src/main/java/com/lwh/jackknife/util/DES.java
        SecretKeySpec key = new SecretKeySpec(KEY_DES.getBytes(), "DES");
        SecretKeySpec key = new SecretKeySpec(keyValue.getBytes(), "DES");
            SecretKeySpec key = new SecretKeySpec(byteKey, "DES");
            SecretKeySpec key = new SecretKeySpec(keyValue.getBytes(), "DES");
./054_skydoves_preferenceroom/demo/src/main/java/com/skydoves/preferenceroomdemo/utils/SecurityUtils.java
      SecretKeySpec skey = new SecretKeySpec(key.getBytes(), "AES");
      SecretKeySpec skey = new SecretKeySpec(key.getBytes(), "AES");
./054_skydoves_preferenceroom/preferenceroom/src/main/java/com/skydoves/preferenceroom/AESEncryption.java
      SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), "AES");
      SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), "AES");
./055_jwtk_jjwt/api/src/main/java/io/jsonwebtoken/security/Keys.java
                return new SecretKeySpec(bytes, alg.getJcaName());
./055_jwtk_jjwt/api/src/main/java/io/jsonwebtoken/SigningKeyResolverAdapter.java
        return new SecretKeySpec(keyBytes, alg.getJcaName());
        return new SecretKeySpec(keyBytes, alg.getJcaName());
./055_jwtk_jjwt/impl/src/main/java/io/jsonwebtoken/impl/crypto/MacSigner.java
        this(alg, new SecretKeySpec(key, alg.getJcaName()));
./055_jwtk_jjwt/impl/src/main/java/io/jsonwebtoken/impl/DefaultJwtBuilder.java
        SecretKey key = new SecretKeySpec(secretKeyBytes, alg.getJcaName());
./055_jwtk_jjwt/impl/src/main/java/io/jsonwebtoken/impl/DefaultJwtParser.java
                    key = new SecretKeySpec(keyBytes, algorithm.getJcaName());
./056_thirtydegreesray_openhub/app/src/main/java/com/thirtydegreesray/openhub/util/AESEncrypting.java
		  SecretKeySpec skey = new SecretKeySpec(key.getBytes(), "AES");
	      SecretKeySpec skey = new SecretKeySpec(key.getBytes(), "AES");
./057_novoda_spikes/aws-cognito/client/src/com/amazonaws/cognito/sync/demo/client/server/AESEncryption.java
        return new SecretKeySpec(Hex.decodeHex(key.toCharArray()), "AES");
./057_novoda_spikes/aws-cognito/client/src/com/amazonaws/cognito/sync/demo/client/server/Utilities.java
                mac.init(new SecretKeySpec(key.getBytes("UTF8"), "HmacSHA256"));
./057_novoda_spikes/aws-cognito/server/src/main/java/com/amazonaws/cognito/devauthsample/AESEncryption.java
            return new SecretKeySpec(Hex.decodeHex(key.toCharArray()), "AES");
./057_novoda_spikes/aws-cognito/server/src/main/java/com/amazonaws/cognito/devauthsample/Utilities.java
            mac.init(new SecretKeySpec(key.getBytes(ENCODING_FORMAT), SIGNATURE_METHOD));
./058_x-falcon_virtual-hosts/app/src/main/java/org/xbill/DNS/TSIG.java
	SecretKey key = new SecretKeySpec(keyBytes, macAlgorithm);
	init_hmac(macAlgorithm, new SecretKeySpec(keyBytes, macAlgorithm));
./060_blankj_androidutilcode/utilcode/lib/src/main/java/com/blankj/utilcode/util/EncryptUtils.java
            SecretKeySpec secretKey = new SecretKeySpec(key, algorithm);
                secretKey = new SecretKeySpec(key, algorithm);
./061_calebfenton_simplify/simplify/ObfuscatedApp/app/src/main/java/org/cf/crypto/AesCbcWithIntegrity.java
                    new SecretKeySpec(confidentialityKey, 0, confidentialityKey.length, CIPHER),
                    new SecretKeySpec(integrityKey, HMAC_ALGORITHM));
        SecretKey integrityKey = new SecretKeySpec(integrityKeyBytes, HMAC_ALGORITHM);
        SecretKey confidentialityKey = new SecretKeySpec(confidentialityKeyBytes, CIPHER);
        SecretKey integrityKey = new SecretKeySpec(integrityKeyBytes, HMAC_ALGORITHM);
./061_calebfenton_simplify/simplify/ObfuscatedApp/app/src/main/java/org/cf/crypto/TrippleDES.java
        SecretKey key = new SecretKeySpec(keyBytes, "DESede");
./063_matrix-org_matrix-android-sdk/matrix-sdk/src/main/java/org/matrix/androidsdk/crypto/MXEncryptedAttachments.java
            SecretKeySpec secretKeySpec = new SecretKeySpec(key, SECRET_KEY_SPEC_ALGORITHM);
            SecretKeySpec secretKeySpec = new SecretKeySpec(key, SECRET_KEY_SPEC_ALGORITHM);
./063_matrix-org_matrix-android-sdk/matrix-sdk/src/main/java/org/matrix/androidsdk/crypto/MXMegolmExportEncryption.java
        SecretKey macKey = new SecretKeySpec(getHmacKey(deriveKey), "HmacSHA256");
        SecretKeySpec secretKeySpec = new SecretKeySpec(getAesKey(deriveKey), "AES");
        SecretKeySpec secretKeySpec = new SecretKeySpec(getAesKey(deriveKey), "AES");
        SecretKey macKey = new SecretKeySpec(getHmacKey(deriveKey), "HmacSHA256");
        prf.init(new SecretKeySpec(password.getBytes("UTF-8"), "HmacSHA512"));
./063_matrix-org_matrix-android-sdk/matrix-sdk/src/main/java/org/matrix/androidsdk/util/CompatUtil.java
                    key = new SecretKeySpec(aesKeyRaw, "AES");
./064_aws-amplify_aws-sdk-android/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/CognitoUser.java
            final SecretKeySpec keySpec = new SecretKeySpec(key, "HmacSHA256");
            final SecretKeySpec keySpec = new SecretKeySpec(key, "HmacSHA256");
./064_aws-amplify_aws-sdk-android/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/util/CognitoSecretHash.java
        final SecretKeySpec signingKey = new SecretKeySpec(clientSecret.getBytes(StringUtils.UTF8),
./064_aws-amplify_aws-sdk-android/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/util/Hkdf.java
            e.init(new SecretKeySpec(realSalt, this.algorithm));
            final SecretKeySpec key = new SecretKeySpec(rawKeyMaterial, this.algorithm);
./064_aws-amplify_aws-sdk-android/aws-android-sdk-core/src/main/java/com/amazonaws/auth/AbstractAWSSigner.java
            mac.init(new SecretKeySpec(key, algorithm.toString()));
./064_aws-amplify_aws-sdk-android/aws-android-sdk-ec2/src/main/java/com/amazonaws/services/ec2/util/S3UploadPolicy.java
        final SecretKeySpec signingKey = new SecretKeySpec(awsSecretKey.getBytes(), HMAC_SHA1_ALGORITHM);
./064_aws-amplify_aws-sdk-android/aws-android-sdk-iot/src/main/java/com/amazonaws/mobileconnectors/iot/AWSIotWebSocketUrlSigner.java
            mac.init(new SecretKeySpec(key, algorithm.toString()));
./064_aws-amplify_aws-sdk-android/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/ContentCryptoMaterial.java
            return new SecretKeySpec(decryptedSymmetricKeyBytes,
        return new SecretKeySpec(copyAllBytesFrom(result.getPlaintext()),
./064_aws-amplify_aws-sdk-android/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/EncryptionUtils.java
            return new SecretKeySpec(decryptedSymmetricKeyBytes,
./064_aws-amplify_aws-sdk-android/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/crypto/S3CryptoModuleBase.java
                new SecretKeySpec(copyAllBytesFrom(keyGenRes.getPlaintext()),
./064_aws-amplify_aws-sdk-android/aws-android-sdk-s3-test/src/androidTest/java/com/amazonaws/services/s3/internal/crypto/CryptoTestUtils.java
        return new SecretKeySpec(new byte[scheme.getKeyLengthInBits() / 8],
        return new SecretKeySpec(new byte[32], "AES");
        SecretKey cek = new SecretKeySpec(
./065_freeyourgadget_gadgetbridge/app/src/main/java/nodomain/freeyourgadget/gadgetbridge/service/devices/huami/operations/InitOperation.java
        SecretKeySpec newKey = new SecretKeySpec(secretKey, "AES");
./066_afkt_devutils/DevLibUtils/src/main/java/dev/utils/common/encrypt/AESUtils.java
            SecretKey secretKey = new SecretKeySpec(key, "AES");
            SecretKey secretKey = new SecretKeySpec(key, "AES");
./066_afkt_devutils/DevLibUtils/src/main/java/dev/utils/common/encrypt/DESUtils.java
            SecretKey secretKey = new SecretKeySpec(key, "DES");
            SecretKey secretKey = new SecretKeySpec(key, "DES");
./066_afkt_devutils/DevLibUtils/src/main/java/dev/utils/common/encrypt/EncryptUtils.java
            SecretKeySpec secretKey = new SecretKeySpec(key, algorithm);
                secretKey = new SecretKeySpec(key, algorithm);
./066_afkt_devutils/DevLibUtils/src/main/java/dev/utils/common/encrypt/TripleDESUtils.java
            SecretKey secretKey = new SecretKeySpec(key, "DESede");
            SecretKey secretKey = new SecretKeySpec(key, "DESede");
./067_forcedotcom_salesforcemobilesdk-android/libs/SalesforceAnalytics/src/com/salesforce/androidsdk/analytics/security/Encryptor.java
            final SecretKeySpec keySpec = new SecretKeySpec(keyBytes, sha.getAlgorithm());
            final SecretKeySpec skeySpec = new SecretKeySpec(key, cipher.getAlgorithm());
        final SecretKeySpec skeySpec = new SecretKeySpec(key, cipher.getAlgorithm());
        final SecretKeySpec skeySpec = new SecretKeySpec(key, cipher.getAlgorithm());
./068_teamamaze_amazefilemanager/app/src/main/java/com/amaze/filemanager/utils/files/CryptUtil.java
                return new SecretKeySpec(decryptAESKey(Base64.decode(encodedString, Base64.DEFAULT)), "AES");
./069_gcssloop_encrypt/encryptlib/src/main/java/com/gcssloop/encrypt/symmetric/AESUtil.java
            SecretKeySpec key = new SecretKeySpec(enCodeFormat, "AES");
./071_aliyun_aliyun-oss-android-sdk/oss-android-sdk/src/main/java/com/alibaba/sdk/android/oss/common/auth/HmacSHA1Signature.java
            mac.init(new SecretKeySpec(key, getAlgorithm()));
./072_open-keychain_open-keychain/OpenKeychain/src/main/java/org/sufficientlysecure/keychain/network/TlsPskCompat.java
            return new SecretKeySpec(presharedKey, "AES");
            return new SecretKeySpec(presharedKey, "AES");
./072_open-keychain_open-keychain/OpenKeychain/src/main/java/org/sufficientlysecure/keychain/securitytoken/operations/PsoDecryptTokenOp.java
            c.init(Cipher.UNWRAP_MODE, new SecretKeySpec(kek, 0, publicKey.getSecurityTokenSymmetricKeySize() / 8, "AES"));
./072_open-keychain_open-keychain/OpenKeychain/src/main/java/org/sufficientlysecure/keychain/securitytoken/SCP11bSecureMessaging.java
        mSEnc = new SecretKeySpec(sEnc, SCP11_SYMMETRIC_ALGO);
        mSMac = new SecretKeySpec(sMac, SCP11_SYMMETRIC_ALGO);
        mSRMac = new SecretKeySpec(sRmac, SCP11_SYMMETRIC_ALGO);
            mac.init(new SecretKeySpec(rkey, SCP11_SYMMETRIC_ALGO));
./073_consenlabs_token-core-android/app/src/main/java/org/consenlabs/tokencore/foundation/crypto/AES.java
      SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
./073_consenlabs_token-core-android/app/src/main/java/org/consenlabs/tokencore/foundation/crypto/Hash.java
      SecretKeySpec secret_key = new SecretKeySpec(key, "HmacSHA256");
./075_gjson_androidtools/app/src/main/java/com/gjson/androidtools/utils/EncodeUtil.java
            SecretKeySpec keySpec = new SecretKeySpec(key, algorithm);
./076_web3j_web3j/core/src/main/java/org/web3j/crypto/Wallet.java
            SecretKeySpec secretKeySpec = new SecretKeySpec(encryptKey, "AES");
./077_eugenehoran_android-material-searchview/app/src/main/java/com/eugene/fithealth/api/FatSecretRequest.java
        SecretKey sk = new SecretKeySpec(Globals.APP_SECRET.getBytes(), Globals.HMAC_SHA1_ALGORITHM);
./080_pubnub_java/src/main/java/com/pubnub/api/PubNubUtil.java
        SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(Charset.forName("UTF-8")), "HmacSHA256");
./080_pubnub_java/src/main/java/com/pubnub/api/vendor/Crypto.java
            SecretKeySpec newKey = new SecretKeySpec(keyBytes, "AES");
            SecretKeySpec newKey = new SecretKeySpec(keyBytes, "AES");
./081_gpfduoduo_airplay-receiver-on-android/ZI-master/src/com/yixia/zi/utils/Crypto.java
			SecretKeySpec skey = new SecretKeySpec(generateKey(key), "AES");
./082_gjtorikian_shelves/app/src/main/java/com/miadzin/shelves/util/Crypto.java
		SecretKey secretKey = new SecretKeySpec(passwordByteArray, keyAlgorithm);
./084_puredark_h-viewer/httpdns/src/main/java/com/sina/util/dnscache/dnsp/impl/HttpPodDns.java
                SecretKeySpec keySpec = new SecretKeySpec(DNSCacheConfig.Data.getInstance().DNSPOD_KEY.getBytes("utf-8"), "DES");
                SecretKeySpec keySpec = new SecretKeySpec(DNSCacheConfig.Data.getInstance().DNSPOD_KEY.getBytes("utf-8"), "DES");
./086_jenly1314_wanandroid/app/src/main/java/com/king/wanandroid/util/AES.java
        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, "AES");
./087_aa112901_remusic/app/src/main/java/com/wm/remusic/net/Aes.java
        Key key = new SecretKeySpec(keyBytes, "AES");
            SecretKeySpec keyspec = new SecretKeySpec(password.getBytes(), "AES");
            SecretKeySpec key = new SecretKeySpec(keyStr, "AES");
./087_aa112901_remusic/app/src/main/java/com/wm/remusic/net/AESTools.java
        SecretKeySpec localSecretKeySpec = new SecretKeySpec(
./088_kangdongpu_wanandroid/app/src/main/java/com/kdp/wanandroidclient/manager/UserInfoManager.java
./088_kangdongpu_wanandroid/app/src/main/java/com/kdp/wanandroidclient/utils/AesEncryptionUtils.java
        return new SecretKeySpec(bytes, ENCRYPTION_ALGORITHM);
./090_jaydenxiao2016_androidfire/library/common/src/main/java/com/jaydenxiao/common/security/AESUtil.java
		SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
			SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
./093_cheikh-wang_lazywaimai-android/app/src/main/java/com/cheikh/lazywaimai/network/RequestSignInterceptor.java
        SecretKeySpec spec = new SecretKeySpec(secret.getBytes(ENCODING), MAC_NAME);
./095_hankkin_reading/app/src/main/java/com/hankkin/reading/utils/SecurityUtils.java
        return new SecretKeySpec(data, "AES");
./096_google_exoplayer/library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CachedContentIndex.java
        secretKeySpec = new SecretKeySpec(secretKey, "AES");
./096_google_exoplayer/library/core/src/main/java/com/google/android/exoplayer2/upstream/crypto/AesFlushingCipher.java
          new SecretKeySpec(secretKey, Util.splitAtFirst(cipher.getAlgorithm(), "/")[0]),
./096_google_exoplayer/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/Aes128DataSource.java
    Key cipherKey = new SecretKeySpec(encryptionKey, "AES");
./097_uwetrottmann_seriesguide/app/src/main/java/com/battlelancer/seriesguide/thetvdbapi/TvdbImageTools.java
                SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(), "HmacSHA256");
./098_pedrosg94_rtmp-rtsp-stream-client-java/rtmp/src/main/java/com/github/faucamp/simplertmp/Crypto.java
      hmacSHA256.init(new SecretKeySpec(key, "HmacSHA256"));
      hmacSHA256.init(new SecretKeySpec(key, 0, length, "HmacSHA256"));
./101_dreamingincodezh_douya/app/src/main/java/me/zhanghai/android/douya/network/api/FrodoSignatureInterceptor.java
            Key keySpec = new SecretKeySpec(key.getBytes(), ALGORITHM_HMAC_SHA1);
./102_cgeo_cgeo/main/src/cgeo/geocaching/utils/CryptUtils.java
            final SecretKeySpec secretKeySpec = new SecretKeySpec(salt.getBytes(CharEncoding.UTF_8), "HmacSHA1");
./103_greenaddress_walletcordova/plugins-src/cordova-plugin-greenaddress/deps/com/bitsofproof/supernode/wallet/KeyFormatter.java
			SecretKeySpec keyspec = new SecretKeySpec (key, "AES");
			SecretKeySpec keyspec = new SecretKeySpec (aeskey, "AES");
		SecretKeySpec keyspec = new SecretKeySpec (aesKey, "AES");
./103_greenaddress_walletcordova/plugins-src/cordova-plugin-greenaddress/deps/com/lambdaworks/crypto/PBKDF.java
        mac.init(new SecretKeySpec(P, alg));
./103_greenaddress_walletcordova/plugins-src/cordova-plugin-greenaddress/deps/com/lambdaworks/crypto/SCrypt.java
        mac.init(new SecretKeySpec(passwd, "HmacSHA256"));
./104_oraclechain_pocketeos-android/app/src/main/java/com/oraclechain/pocketeos/blockchain/cypto/util/CryptUtil.java
            SecretKey secureKey = new SecretKeySpec(key, "AES");
            SecretKey secureKey = new SecretKeySpec(key, "AES");
./104_oraclechain_pocketeos-android/app/src/main/java/com/oraclechain/pocketeos/utils/EncryptUtil.java
        key = new SecretKeySpec(keyBytes, KEY_ALGORITHM);
./107_mycelium-com_wallet-android/bitlib/src/main/java/com/mrd/bitlib/lambdaworks/crypto/PBKDF.java
        mac.init(new SecretKeySpec(P, alg));
./107_mycelium-com_wallet-android/bitlib/src/main/java/com/mrd/bitlib/lambdaworks/crypto/SCrypt.java
      mac.init(new SecretKeySpec(passwd, "HmacSHA256"));
./107_mycelium-com_wallet-android/LVL/src/main/java/com/google/android/vending/licensing/AESObfuscator.java
            SecretKey secret = new SecretKeySpec(tmp.getEncoded(), "AES");
./108_coinomi_coinomi-android/core/src/main/java/com/coinomi/core/wallet/SerializedKey.java
            SecretKeySpec keyspec = new SecretKeySpec(key, "AES");
            SecretKeySpec keyspec = new SecretKeySpec(aeskey, "AES");
./110_mtotschnig_myexpenses/myExpenses/src/main/java/org/totschnig/myexpenses/util/crypt/EncryptionHelper.java
    return new SecretKeySpec(sha.digest(password.getBytes(Charset.forName("UTF-8"))), "AES");
./110_mtotschnig_myexpenses/PlayLicensingOrig/src/com/google/android/vending/licensing/AESObfuscator.java
            SecretKey secret = new SecretKeySpec(tmp.getEncoded(), "AES");
./112_moneymanagerex_android-money-manager-ex/app/src/main/java/com/money/manager/ex/passcode/Encryptor.java
        return new SecretKeySpec(
            return new SecretKeySpec(keyBytes, "AES");
        SecretKey key = new SecretKeySpec(keyBytes, "AES");
./112_moneymanagerex_android-money-manager-ex/app/src/main/java/com/money/manager/ex/passcode/SimpleCrypto.java
	    SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
	    SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
./114_pazaan_600seriesandroiduploader/app/src/main/java/info/nightscout/android/medtronic/message/ContourNextLinkMessage.java
        SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
./114_pazaan_600seriesandroiduploader/app/src/main/java/info/nightscout/android/medtronic/message/MedtronicRequestMessage.java
        SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
./116_jamorham_xdrip-plus/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/Ob1G5StateMachine.java
            final SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
./116_jamorham_xdrip-plus/app/src/main/java/com/eveningoutpost/dexdrip/insulin/inpen/messages/BondTx.java
            final SecretKeySpec secretKeySpec = new SecretKeySpec(format(new ChalTx(flagBytes).getBytes()), "AES");
./116_jamorham_xdrip-plus/app/src/main/java/com/eveningoutpost/dexdrip/Services/G5CollectionService.java
            SecretKeySpec skeySpec = new SecretKeySpec(key, "AES");
./116_jamorham_xdrip-plus/app/src/main/java/com/eveningoutpost/dexdrip/utils/CipherUtils.java
            SecretKeySpec newKey = new SecretKeySpec(keyBytes, "AES");
            SecretKeySpec newKey = new SecretKeySpec(keyBytes, "AES");
./116_jamorham_xdrip-plus/etc/SendRemoteCalibrations/SendCalibrations.java
            SecretKeySpec newKey = new SecretKeySpec(keyBytes, "AES");
./116_jamorham_xdrip-plus/wear/src/main/java/com/eveningoutpost/dexdrip/G5Model/Ob1G5StateMachine.java
            final SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
./116_jamorham_xdrip-plus/wear/src/main/java/com/eveningoutpost/dexdrip/Services/G5CollectionService.java
            SecretKeySpec skeySpec = new SecretKeySpec(key, "AES");
./116_jamorham_xdrip-plus/wear/src/main/java/com/eveningoutpost/dexdrip/utils/CipherUtils.java
            SecretKeySpec newKey = new SecretKeySpec(keyBytes, "AES");
            SecretKeySpec newKey = new SecretKeySpec(keyBytes, "AES");
./117_qiniu_happy-dns-android/library/src/main/java/com/qiniu/android/dns/http/DnspodEnterprise.java
        this.key = new SecretKeySpec(k, "DES");
./118_materialos_android-icon-pack/licensing/src/main/java/com/google/android/vending/licensing/AESObfuscator.java
            SecretKey secret = new SecretKeySpec(tmp.getEncoded(), "AES");
./120_harshalbenake_hbworkspace2-100/EncryptDecryptString/src/com/example/hbdemo/MainActivity.java
            secretKeySpec = new SecretKeySpec((keyGenerator.generateKey()).getEncoded(), "AES");
./122_eric0liang_cardocr/lib_cardocr/src/main/java/cn/com/bluemoon/cardocr/lib/sign/HMACSHA1.java
		SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(),
./124_signalapp_libsignal-protocol-java/java/src/main/java/org/whispersystems/libsignal/groups/GroupCipher.java
      cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key, "AES"), ivParameterSpec);
      cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key, "AES"), ivParameterSpec);
./124_signalapp_libsignal-protocol-java/java/src/main/java/org/whispersystems/libsignal/groups/ratchet/SenderChainKey.java
      mac.init(new SecretKeySpec(key, "HmacSHA256"));
./124_signalapp_libsignal-protocol-java/java/src/main/java/org/whispersystems/libsignal/kdf/DerivedMessageSecrets.java
      this.cipherKey = new SecretKeySpec(keys[0], "AES");
      this.macKey    = new SecretKeySpec(keys[1], "HmacSHA256");
./124_signalapp_libsignal-protocol-java/java/src/main/java/org/whispersystems/libsignal/kdf/HKDF.java
      mac.init(new SecretKeySpec(salt, "HmacSHA256"));
        mac.init(new SecretKeySpec(prk, "HmacSHA256"));
./124_signalapp_libsignal-protocol-java/java/src/main/java/org/whispersystems/libsignal/protocol/SignalMessage.java
./124_signalapp_libsignal-protocol-java/java/src/main/java/org/whispersystems/libsignal/ratchet/ChainKey.java
      mac.init(new SecretKeySpec(key, "HmacSHA256"));
./124_signalapp_libsignal-protocol-java/java/src/main/java/org/whispersystems/libsignal/ratchet/MessageKeys.java
./124_signalapp_libsignal-protocol-java/java/src/main/java/org/whispersystems/libsignal/SessionCipher.java
./124_signalapp_libsignal-protocol-java/java/src/main/java/org/whispersystems/libsignal/state/SessionState.java
        result = new MessageKeys(new SecretKeySpec(messageKey.getCipherKey().toByteArray(), "AES"),
                                 new SecretKeySpec(messageKey.getMacKey().toByteArray(), "HmacSHA256"),
./125_victoralbertos_rxcache/core/src/main/java/io/rx_cache2/internal/encrypt/BuiltInEncryptor.java
    return new SecretKeySpec(secretKey.getEncoded(), "AES");
./126_mcxiaoke_android-next/core/src/main/java/com/mcxiaoke/next/utils/CryptoUtils.java
                    keySpec = new SecretKeySpec(key, KEY_AES_SPEC);
                    keySpec = new SecretKeySpec(key, KEY_AES_SPEC);
                    keySpec = new SecretKeySpec(key, "AES/CBC/PKCS7Padding");// AES/ECB/PKCS5Padding
                    keySpec = new SecretKeySpec(key, "AES/ECB/PKCS7Padding");
                SecretKey key = new SecretKeySpec(keyBytes, "AES");
./127_sromku_android-storage/storage/src/main/java/com/snatik/storage/security/SecurityUtil.java
            SecretKey secretkey = new SecretKeySpec(secretKey, CipherAlgorithmType.AES.getAlgorithmName());
./128_puffopensource_puff-android/app/src/main/java/sun/bob/leela/runnable/ChangePasswordRunnable.java
        SecretKeySpec skeySpec = new SecretKeySpec(newPassword.getBytes("UTF-8"), "Blowfish");
        SecretKeySpec skeySpec = new SecretKeySpec(oldPassword.getBytes("UTF-8"), "Blowfish");
./128_puffopensource_puff-android/app/src/main/java/sun/bob/leela/runnable/CryptoRunnable.java
        SecretKeySpec skeySpec = new SecretKeySpec(password.getBytes("UTF-8"), "Blowfish");
        SecretKeySpec skeySpec = new SecretKeySpec(password.getBytes("UTF-8"), "Blowfish");
./128_puffopensource_puff-android/app/src/main/java/sun/bob/leela/runnable/QuickPassRunnable.java
        SecretKey secret = new SecretKeySpec(secretKey.getEncoded(), "AES");
        SecretKey secret = new SecretKeySpec(tmp.getEncoded(), "AES");
./131_0xbb_otp-authenticator/app/src/androidTest/java/net/bierbaumer/otp_authenticator/ApplicationTest.java
                SecretKeySpec k = new SecretKeySpec(new Hex().decode(testCase[0].getBytes()), "AES");
./131_0xbb_otp-authenticator/app/src/main/java/net/bierbaumer/otp_authenticator/EncryptionHelper.java
            final SecretKey key = new SecretKeySpec(raw, "AES");
./131_0xbb_otp-authenticator/app/src/main/java/net/bierbaumer/otp_authenticator/TOTPHelper.java
            SecretKeySpec signKey = new SecretKeySpec(key, SHA1);
./132_tozny_java-aes-crypto/aes-crypto/src/main/java/com/tozny/crypto/android/AesCbcWithIntegrity.java
                    new SecretKeySpec(confidentialityKey, 0, confidentialityKey.length, CIPHER),
                    new SecretKeySpec(integrityKey, HMAC_ALGORITHM));
        SecretKey integrityKey = new SecretKeySpec(integrityKeyBytes, HMAC_ALGORITHM);
        SecretKey confidentialityKey = new SecretKeySpec(confidentialityKeyBytes, CIPHER);
        SecretKey integrityKey = new SecretKeySpec(integrityKeyBytes, HMAC_ALGORITHM);
./133_ophio_secure-preferences/library/src/main/java/in/co/ophio/secure/core/KeyStoreKeyGenerator.java
            final SecretKey key = new SecretKeySpec(raw, "AES");
./136_victoralbertos_rxsocialconnect-android/core/src/main/java/org/fuckboilerplate/rx_social_connect/internal/encryption/BuiltInEncryptor.java
        return new SecretKeySpec(secretKey.getEncoded(), "AES");
./138_cternes_openkeepass/src/main/java/de/slackspace/openkeepass/crypto/Aes.java
            Key aesKey = new SecretKeySpec(key, KEY_ALGORITHM);
            Key aesKey = new SecretKeySpec(key, KEY_ALGORITHM);
./139_maxcamillo_android-keystore-password-recover/JKS.java
      return new SecretKeySpec(key, alias);
./140_dineshshetty_android-insecurebankv2/InsecureBankv2/app/src/main/java/com/android/insecurebankv2/CryptoClass.java
		SecretKeySpec newKey = new SecretKeySpec(keyBytes, "AES");
		SecretKeySpec newKey = new SecretKeySpec(keyBytes, "AES");
./140_dineshshetty_android-insecurebankv2/wip-attackercode/ExploitAES/app/src/main/java/com/android/dns/exploitaes/MainActivity.java
        SecretKeySpec newKey = new SecretKeySpec(keyBytes, "AES");
./145_rtyley_spongycastle/pg/src/main/java/org/spongycastle/openpgp/operator/jcajce/JcaJcePGPUtil.java
        return new SecretKeySpec(keyBytes, algName);
./145_rtyley_spongycastle/pg/src/main/java/org/spongycastle/openpgp/operator/jcajce/JcePBEDataDecryptorFactoryBuilder.java
                         keyCipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key, cipherName), new IvParameterSpec(new byte[keyCipher.getBlockSize()]));
./145_rtyley_spongycastle/pg/src/main/java/org/spongycastle/openpgp/operator/jcajce/JcePBEKeyEncryptionMethodGenerator.java
            SecretKey sKey = new SecretKeySpec(key, PGPUtil.getSymmetricCipherName(encAlgorithm));
./145_rtyley_spongycastle/pg/src/main/java/org/spongycastle/openpgp/operator/jcajce/JcePublicKeyKeyEncryptionMethodGenerator.java
                byte[] C = c.wrap(new SecretKeySpec(paddedSessionData, PGPUtil.getSymmetricCipherName(sessionInfo[0])));
./145_rtyley_spongycastle/pg/src/main/java/org/spongycastle/openpgp/operator/jcajce/OperatorHelper.java
            SecretKey secretKey = new SecretKeySpec(key, PGPUtil.getSymmetricCipherName(encAlgorithm));
./145_rtyley_spongycastle/pg/src/main/jdk1.1/org/spongycastle/openpgp/operator/jcajce/JcePublicKeyKeyEncryptionMethodGenerator.java
                byte[] C = c.wrap(new SecretKeySpec(paddedSessionData, PGPUtil.getSymmetricCipherName(sessionInfo[0])));
./145_rtyley_spongycastle/pg/src/main/jdk1.1/org/spongycastle/openpgp/operator/jcajce/OperatorHelper.java
            SecretKey secretKey = new SecretKeySpec(key, PGPUtil.getSymmetricCipherName(encAlgorithm));
./145_rtyley_spongycastle/pkix/src/main/java/org/spongycastle/cert/crmf/jcajce/JceAsymmetricValueDecryptorGenerator.java
            return new SecretKeySpec((byte[])unwrapper.generateUnwrappedKey(contentEncryptionAlgorithm, encryptedContentEncryptionKey).getRepresentation(), contentEncryptionAlgorithm.getAlgorithm().getId());
./145_rtyley_spongycastle/pkix/src/main/java/org/spongycastle/cert/crmf/jcajce/JcePKMACValuesCalculator.java
            mac.init(new SecretKeySpec(pwd, mac.getAlgorithm()));
./145_rtyley_spongycastle/pkix/src/main/java/org/spongycastle/cms/jcajce/EnvelopedDataHelper.java
            return new SecretKeySpec((byte[])key.getRepresentation(), "ENC");
            return new SecretKeySpec((byte[])key.getRepresentation(), getBaseCipherName(algorithm));
./145_rtyley_spongycastle/pkix/src/main/java/org/spongycastle/cms/jcajce/JcePasswordRecipientInfoGenerator.java
            keyEncryptionCipher.init(Cipher.WRAP_MODE, new SecretKeySpec(derivedKey, keyEncryptionCipher.getAlgorithm()), ivSpec);
./145_rtyley_spongycastle/pkix/src/main/java/org/spongycastle/cms/jcajce/JcePasswordRecipient.java
            keyEncryptionCipher.init(Cipher.UNWRAP_MODE, new SecretKeySpec(derivedKey, keyEncryptionCipher.getAlgorithm()), ivSpec);
./145_rtyley_spongycastle/pkix/src/main/java/org/spongycastle/openssl/jcajce/PEMUtilities.java
        return new SecretKeySpec(sKey.getEncoded(), algorithm);
        return new SecretKeySpec(sKey.getEncoded(), algorithm);
            return new SecretKeySpec(key, algorithm);
./145_rtyley_spongycastle/pkix/src/main/java/org/spongycastle/operator/jcajce/JceAsymmetricKeyUnwrapper.java
                sKey = new SecretKeySpec(keyCipher.doFinal(encryptedKey), encryptedKeyAlgorithm.getAlgorithm().getId());
./145_rtyley_spongycastle/pkix/src/main/java/org/spongycastle/operator/jcajce/OperatorUtils.java
            return new SecretKeySpec((byte[])key.getRepresentation(), "ENC");
./145_rtyley_spongycastle/pkix/src/main/jdk1.1/org/spongycastle/cert/crmf/jcajce/JceAsymmetricValueDecryptorGenerator.java
                sKey = new SecretKeySpec(keyCipher.doFinal(encryptedContentEncryptionKey), contentEncryptionAlgorithm.getAlgorithm().getId());
./145_rtyley_spongycastle/pkix/src/main/jdk1.1/org/spongycastle/cert/crmf/jcajce/JcePKMACValuesCalculator.java
            mac.init(new SecretKeySpec(pwd, mac.getAlgorithm()));
./145_rtyley_spongycastle/pkix/src/main/jdk1.1/org/spongycastle/cms/jcajce/EnvelopedDataHelper.java
            return new SecretKeySpec((byte[])key.getRepresentation(), "ENC");
            return new SecretKeySpec((byte[])key.getRepresentation(), getBaseCipherName(algorithm));
./145_rtyley_spongycastle/pkix/src/main/jdk1.1/org/spongycastle/cms/jcajce/JcePasswordRecipientInfoGenerator.java
            keyEncryptionCipher.init(Cipher.WRAP_MODE, new SecretKeySpec(derivedKey, keyEncryptionCipher.getAlgorithm()), ivSpec);
./145_rtyley_spongycastle/pkix/src/main/jdk1.1/org/spongycastle/cms/jcajce/JcePasswordRecipient.java
            keyEncryptionCipher.init(Cipher.UNWRAP_MODE, new SecretKeySpec(derivedKey, keyEncryptionCipher.getAlgorithm()), ivSpec);
./145_rtyley_spongycastle/pkix/src/main/jdk1.1/org/spongycastle/openssl/jcajce/PEMUtilities.java
        return new SecretKeySpec(sKey.getEncoded(), algorithm);
            return new SecretKeySpec(key, algorithm);
./145_rtyley_spongycastle/pkix/src/main/jdk1.1/org/spongycastle/operator/jcajce/JceAsymmetricKeyUnwrapper.java
                sKey = new SecretKeySpec(keyCipher.doFinal(encryptedKey), encryptedKeyAlgorithm.getAlgorithm().getId());
./145_rtyley_spongycastle/pkix/src/test/java/org/spongycastle/cms/test/NewEnvelopedDataTest.java
        SecretKey kek = new SecretKeySpec(new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, "AES");
./145_rtyley_spongycastle/pkix/src/test/jdk1.4/org/spongycastle/cms/test/NewEnvelopedDataTest.java
        SecretKey kek  = new SecretKeySpec(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }, "AES");
./145_rtyley_spongycastle/prov/src/main/java/org/spongycastle/jcajce/provider/asymmetric/dh/KeyAgreementSpi.java
            return new SecretKeySpec(trimZeroes(res), algorithm);
./145_rtyley_spongycastle/prov/src/main/java/org/spongycastle/jcajce/provider/asymmetric/util/BaseAgreementSpi.java
        return new SecretKeySpec(secret, algName);
./145_rtyley_spongycastle/prov/src/main/java/org/spongycastle/jcajce/provider/asymmetric/util/BaseCipherSpi.java
            return new SecretKeySpec(encoded, wrappedKeyAlgorithm);
./145_rtyley_spongycastle/prov/src/main/java/org/spongycastle/jcajce/provider/keystore/bc/BcKeyStoreSpi.java
            return new SecretKeySpec(enc, algorithm);
./145_rtyley_spongycastle/prov/src/main/java/org/spongycastle/jcajce/provider/keystore/bcfks/BcFKSKeyStoreSpi.java
                    return kFact.generateSecret(new SecretKeySpec(keyData.getKeyBytes(), keyData.getKeyAlgorithm().getId()));
                c.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(keyBytes, "AES"));
                c.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(keyBytes, "AES"));
            mac.init(new SecretKeySpec(generateKey(pbkdAlgorithm, "INTEGRITY_CHECK", ((password != null) ? password : new char[0])), algorithmId));
            c.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(keyBytes, "AES"));
            c.init(Cipher.DECRYPT_MODE, new SecretKeySpec(keyBytes, "AES"), algParams);
./145_rtyley_spongycastle/prov/src/main/java/org/spongycastle/jcajce/provider/symmetric/DESede.java
                return new SecretKeySpec(k, algName);
                return new SecretKeySpec(engine.generateKey(), algName);
                return new SecretKeySpec(key.getEncoded(), algName);
                return new SecretKeySpec(desKeySpec.getKey(), "DESede");
./145_rtyley_spongycastle/prov/src/main/java/org/spongycastle/jcajce/provider/symmetric/DES.java
            return new SecretKeySpec(engine.generateKey(), algName);
                return new SecretKeySpec(key.getEncoded(), algName);
                return new SecretKeySpec(desKeySpec.getKey(), "DES");
./145_rtyley_spongycastle/prov/src/main/java/org/spongycastle/jcajce/provider/symmetric/OpenSSLPBKDF.java
                return new SecretKeySpec(((KeyParameter)pGen.generateDerivedParameters(pbeSpec.getKeyLength())).getKey(), "OpenSSLPBKDF");
./145_rtyley_spongycastle/prov/src/main/java/org/spongycastle/jcajce/provider/symmetric/TLSKDF.java
                return new SecretKeySpec(PRF_legacy((TLSKeyMaterialSpec)keySpec), algName);
                return new SecretKeySpec(PRF_legacy((TLSKeyMaterialSpec)keySpec), algName);
                return new SecretKeySpec(PRF((TLSKeyMaterialSpec)keySpec, prf), algName);
./145_rtyley_spongycastle/prov/src/main/java/org/spongycastle/jcajce/provider/symmetric/util/BaseKeyGenerator.java
        return new SecretKeySpec(engine.generateKey(), algName);
./145_rtyley_spongycastle/prov/src/main/java/org/spongycastle/jcajce/provider/symmetric/util/BaseSecretKeyFactory.java
            return new SecretKeySpec(((SecretKeySpec)keySpec).getEncoded(), algName);
            return new SecretKeySpec(key.getEncoded(), algName);
        return new SecretKeySpec(key.getEncoded(), algName);
./145_rtyley_spongycastle/prov/src/main/java/org/spongycastle/jcajce/provider/symmetric/util/BaseWrapCipher.java
            return new SecretKeySpec(encoded, wrappedKeyAlgorithm);
./145_rtyley_spongycastle/prov/src/main/java/org/spongycastle/jce/provider/BrokenJCEBlockCipher.java
            return new SecretKeySpec(encoded, wrappedKeyAlgorithm);
./145_rtyley_spongycastle/prov/src/main/jdk1.3/org/spongycastle/jcajce/provider/keystore/bcfks/BcFKSKeyStoreSpi.java
                    return kFact.generateSecret(new SecretKeySpec(keyData.getKeyBytes(), keyData.getKeyAlgorithm().getId()));
                c.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(keyBytes, "AES"));
                c.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(keyBytes, "AES"));
            mac.init(new SecretKeySpec(generateKey(pbkdAlgorithm, "INTEGRITY_CHECK", ((password != null) ? password : new char[0])), algorithmId));
            c.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(keyBytes, "AES"));
            c.init(Cipher.DECRYPT_MODE, new SecretKeySpec(keyBytes, "AES"), algParams);
./145_rtyley_spongycastle/prov/src/main/jdk1.3/org/spongycastle/jce/provider/JCESecretKeyFactory.java
            return new SecretKeySpec(key.getEncoded(), algName);
        return new SecretKeySpec(key.getEncoded(), algName);
                return new SecretKeySpec(desKeySpec.getKey(), "DES");
                return new SecretKeySpec(key.getEncoded(), algName);
                return new SecretKeySpec(desKeySpec.getKey(), "DESede");
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/AEADTest.java
        final SecretKeySpec key = new SecretKeySpec(new byte[eax.getBlockSize()], eax.getAlgorithm());
        SecretKeySpec key = new SecretKeySpec(K, "AES");
        SecretKeySpec key = new SecretKeySpec(K, "AES");
        SecretKeySpec key = new SecretKeySpec(K, "AES");
        SecretKeySpec key = new SecretKeySpec(K, "AES");
        SecretKeySpec key = new SecretKeySpec(K, "AES");
        SecretKeySpec key = new SecretKeySpec(K, "AES");
        SecretKeySpec key = new SecretKeySpec(K, "AES");
            eax.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(K, "AES"), new IvParameterSpec(spec.getIV()));
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/AESSICTest.java
            Key sk = new SecretKeySpec(keys[i], "AES");
        Key sk = new SecretKeySpec(Hex.decode("2B7E151628AED2A6ABF7158809CF4F3C"), "AES");
        sk = new SecretKeySpec(Hex.decode("2B7E151628AED2A6ABF7158809CF4F3C"), "AES");
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/AESTest.java
        key = new SecretKeySpec(keyBytes, "AES");
        key = new SecretKeySpec(K, "AES");
        key = new SecretKeySpec(K, "AES");
        key = new SecretKeySpec(K, "AES");
        key = new SecretKeySpec(K, "AES");
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/ARIATest.java
        key = new SecretKeySpec(keyBytes, "ARIA");
        key = new SecretKeySpec(K, "ARIA");
        key = new SecretKeySpec(K, "ARIA");
        key = new SecretKeySpec(K, "ARIA");
        key = new SecretKeySpec(K, "ARIA");
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/BaseBlockCipherTest.java
            Key wKey = c2.unwrap(c1.wrap(new SecretKeySpec(data, algorithm)), algorithm, Cipher.SECRET_KEY);
            wrapper.init(Cipher.WRAP_MODE, new SecretKeySpec(kek, algorithm), new IvParameterSpec(iv), rand);
            wrapper.init(Cipher.WRAP_MODE, new SecretKeySpec(kek, algorithm), rand);
            byte[]  cText = wrapper.wrap(new SecretKeySpec(in, algorithm));
            wrapper.init(Cipher.UNWRAP_MODE, new SecretKeySpec(kek, algorithm), new IvParameterSpec(iv));
            wrapper.init(Cipher.UNWRAP_MODE, new SecretKeySpec(kek, algorithm));
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/BCFKSStoreTest.java
        SecretKeySpec aesKey = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0e0f000102030405060708090a0b0c0d0e0f"), "AES");
        SecretKeySpec edeKey = new SecretKeySpec(Hex.decode("010102020404070708080b0b0d0d0e0e"), "DESede");
        SecretKeySpec aesKey = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0e0f000102030405060708090a0b0c0d0e0f"), "AES");
        SecretKeySpec edeKey1 = new SecretKeySpec(Hex.decode("010102020404070708080b0b0d0d0e0e"), "DESede");
        SecretKeySpec edeKey2 = new SecretKeySpec(Hex.decode("010102020404070708080b0b0d0d0e0e"), "TripleDES");
        SecretKeySpec edeKey3 = new SecretKeySpec(Hex.decode("010102020404070708080b0b0d0d0e0e"), "TDEA");
        SecretKeySpec hmacKey1 = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0eff"), "HmacSHA1");
        SecretKeySpec hmacKey224 = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0eff"), "HmacSHA224");
        SecretKeySpec hmacKey256 = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0eff01ff"), "HmacSHA256");
        SecretKeySpec hmacKey384 = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0eff0102ff"), "HmacSHA384");
        SecretKeySpec hmacKey512 = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0eff010203ff"), "HmacSHA512");
        checkOneSecretKey(new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0e0f"), "AES"), null);
        checkOneSecretKey(new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0e0f"), "AES"), testPassword);
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/BlockCipherTest.java
            SecretKeySpec cipherKey = new SecretKeySpec(rawDESKey, "DES");
            SecretKeySpec cipherKey = new SecretKeySpec(rawDESKey, "DES");
            SecretKeySpec cipherKey = new SecretKeySpec(rawDESKey, "DES");
            SecretKeySpec cipherKey = new SecretKeySpec(rawDESKey, "DES");
            SecretKeySpec cipherKey = new SecretKeySpec(rawDESKey, "DES");
            c.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(new byte[16], "AES"));
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/CamelliaTest.java
        key = new SecretKeySpec(keyBytes, "Camellia");
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/CipherStreamTest.java
        SecretKey key = new SecretKeySpec(keyBytes, name);
            SecretKeySpec cipherKey = new SecretKeySpec(keyBytes, name);
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/CMacTest.java
        SecretKeySpec key = new SecretKeySpec(keyBytes128, "AES");
        key = new SecretKeySpec(keyBytes192, "AES");
        key = new SecretKeySpec(keyBytes256, "AES");
        key = new SecretKeySpec(keyBytes128, "DESede");
         Key key = new SecretKeySpec(keyBytes, algorithm);
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/DESedeTest.java
            wrapper.init(Cipher.WRAP_MODE, new SecretKeySpec(kek, alg), new IvParameterSpec(iv));
                byte[]  cText = wrapper.wrap(new SecretKeySpec(in, alg));
            wrapper.init(Cipher.UNWRAP_MODE, new SecretKeySpec(kek, alg));
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/DSTU7624Test.java
        key = new SecretKeySpec(keyBytes, name);
        Key wKey = c2.unwrap(c1.wrap(new SecretKeySpec(data, algorithm)), algorithm, Cipher.SECRET_KEY);
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/FIPSDESTest.java
            key = new SecretKeySpec(Hex.decode("0123456789abcdef"), "DES");
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/GMacTest.java
            mac.init(new SecretKeySpec(new byte[mac.getMacLength()], mac.getAlgorithm()), new IvParameterSpec(
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/GOST28147Test.java
        key = new SecretKeySpec(keyBytes, "GOST28147");
        key = new SecretKeySpec(keyBytes, "GOST28147");
            mac.init(new SecretKeySpec(Hex.decode("0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"), "GOST28147"));
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/HMacTest.java
        SecretKey key = new SecretKeySpec(keyBytes, hmacName);
        SecretKey key = new SecretKeySpec(keyBytes, hmacName);
        SecretKeySpec sks = new SecretKeySpec(b, "HmacSHA1");
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/MacTest.java
        SecretKey           key = new SecretKeySpec(keyBytes, "DES");
        key = new SecretKeySpec(keyBytesISO9797, "DESEDE");
        key = new SecretKeySpec(keyBytesISO9797, "DESEDE");
        aliasTest(new SecretKeySpec(keyBytesISO9797, "DESede"), "DESedeMac64withISO7816-4Padding",
        aliasTest(new SecretKeySpec(keyBytesISO9797, "DESede"), "ISO9797ALG3WITHISO7816-4PADDING",
        aliasTest(new SecretKeySpec(keyBytes, "DES"), "DES64",
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/NoekeonTest.java
        key = new SecretKeySpec(keyBytes, "Noekeon");
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/OCBTest.java
        key = new SecretKeySpec(K, cipher);
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/PBETest.java
            SecretKeySpec   encKey = new SecretKeySpec(((KeyParameter)params.getParameters()).getKey(), baseAlgorithm);
            SecretKeySpec   encKey = new SecretKeySpec(((KeyParameter)params.getParameters()).getKey(), baseAlgorithm);
            new SecretKeySpec(Hex.decode("30e69252758e5346"), "DES"),
            new SecretKeySpec(Hex.decode("732f2d33c801732b7206756cbd44f9c1c103ddd97c7cbe8e"), "DES"),
            new SecretKeySpec(Hex.decode("732f2d33c8"), "RC2"),
            new SecretKeySpec(Hex.decode("732f2d33c801732b7206756cbd44f9c1"), "RC4"));
        c2.init(Cipher.DECRYPT_MODE, new SecretKeySpec(bcpbeKey.getEncoded(), "AES"), new IvParameterSpec(((ParametersWithIV)bcpbeKey.getParam()).getIV()));
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/Poly1305Test.java
        mac.init(new SecretKeySpec(MASTER_KEY, name));
                    mac.init(new SecretKeySpec(MASTER_KEY, name), new IvParameterSpec(new byte[16]));
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/SEEDTest.java
        key = new SecretKeySpec(keyBytes, "SEED");
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/Shacal2Test.java
        final SecretKey secretKey = new SecretKeySpec(SecretKeyFactory.getInstance("PBKDF2", "SC").
        key = new SecretKeySpec(keyBytes, "Shacal2");
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/SipHashTest.java
        mac.init(new SecretKeySpec(key, "SipHash"));
        mac.init(new SecretKeySpec(key, "SipHash-2-4"));
        mac.init(new SecretKeySpec(key, "SipHash-2-4"));
        mac.init(new SecretKeySpec(key, "SipHash"));
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/SkeinTest.java
        mac.init(new SecretKeySpec(key, algorithm));
        mac.init(new SecretKeySpec(shortMacKey, "Skein-Mac-512-160"),
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/SM4Test.java
        key = new SecretKeySpec(keyBytes, "SM4");
./145_rtyley_spongycastle/prov/src/test/java/org/spongycastle/jce/provider/test/ThreefishTest.java
        final SecretKey secretKey = new SecretKeySpec(SECRET_KEY_1024, "Threefish-1024");
./145_rtyley_spongycastle/prov/src/test/jdk1.3/org/spongycastle/jce/provider/test/BCFKSStoreTest.java
        SecretKeySpec aesKey = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0e0f000102030405060708090a0b0c0d0e0f"), "AES");
        SecretKeySpec edeKey = new SecretKeySpec(Hex.decode("010102020404070708080b0b0d0d0e0e"), "DESede");
        SecretKeySpec aesKey = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0e0f000102030405060708090a0b0c0d0e0f"), "AES");
        SecretKeySpec edeKey1 = new SecretKeySpec(Hex.decode("010102020404070708080b0b0d0d0e0e"), "DESede");
        SecretKeySpec edeKey2 = new SecretKeySpec(Hex.decode("010102020404070708080b0b0d0d0e0e"), "TripleDES");
        SecretKeySpec edeKey3 = new SecretKeySpec(Hex.decode("010102020404070708080b0b0d0d0e0e"), "TDEA");
        SecretKeySpec hmacKey1 = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0eff"), "HmacSHA1");
        SecretKeySpec hmacKey224 = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0eff"), "HmacSHA224");
        SecretKeySpec hmacKey256 = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0eff01ff"), "HmacSHA256");
        SecretKeySpec hmacKey384 = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0eff0102ff"), "HmacSHA384");
        SecretKeySpec hmacKey512 = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0eff010203ff"), "HmacSHA512");
        checkOneSecretKey(new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0e0f"), "AES"), null);
        checkOneSecretKey(new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0e0f"), "AES"), testPassword);
./145_rtyley_spongycastle/prov/src/test/jdk1.4/org/spongycastle/jce/provider/test/BCFKSStoreTest.java
        SecretKeySpec aesKey = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0e0f000102030405060708090a0b0c0d0e0f"), "AES");
        SecretKeySpec edeKey = new SecretKeySpec(Hex.decode("010102020404070708080b0b0d0d0e0e"), "DESede");
        SecretKeySpec aesKey = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0e0f000102030405060708090a0b0c0d0e0f"), "AES");
        SecretKeySpec edeKey1 = new SecretKeySpec(Hex.decode("010102020404070708080b0b0d0d0e0e"), "DESede");
        SecretKeySpec edeKey2 = new SecretKeySpec(Hex.decode("010102020404070708080b0b0d0d0e0e"), "TripleDES");
        SecretKeySpec edeKey3 = new SecretKeySpec(Hex.decode("010102020404070708080b0b0d0d0e0e"), "TDEA");
        SecretKeySpec hmacKey1 = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0eff"), "HmacSHA1");
        SecretKeySpec hmacKey224 = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0eff"), "HmacSHA224");
        SecretKeySpec hmacKey256 = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0eff01ff"), "HmacSHA256");
        SecretKeySpec hmacKey384 = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0eff0102ff"), "HmacSHA384");
        SecretKeySpec hmacKey512 = new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0eff010203ff"), "HmacSHA512");
        checkOneSecretKey(new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0e0f"), "AES"), null);
        checkOneSecretKey(new SecretKeySpec(Hex.decode("000102030405060708090a0b0c0d0e0f"), "AES"), testPassword);
./145_rtyley_spongycastle/test/src/test/java/org/spongycastle/test/est/TestEnroll.java
////        c.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(new byte[16], "AES"), new GCMParameterSpec(32, new byte[16]));
./145_rtyley_spongycastle/tls/src/main/java/org/spongycastle/tls/crypto/impl/jcajce/JcaTlsCrypto.java
                        return c.wrap(new SecretKeySpec(input, inOff, length, "TLS"));
./145_rtyley_spongycastle/tls/src/main/java/org/spongycastle/tls/crypto/impl/jcajce/JceAEADCipherImpl.java
        this.key = new SecretKeySpec(key, keyOff, keyLen, algorithm);
./145_rtyley_spongycastle/tls/src/main/java/org/spongycastle/tls/crypto/impl/jcajce/JceBlockCipherImpl.java
        this.key = new SecretKeySpec(key, keyOff, keyLen, algorithm);
./145_rtyley_spongycastle/tls/src/main/java/org/spongycastle/tls/crypto/impl/jcajce/JceBlockCipherWithCBCImplicitIVImpl.java
        this.key = new SecretKeySpec(key, keyOff, keyLen, algorithm);
./145_rtyley_spongycastle/tls/src/main/java/org/spongycastle/tls/crypto/impl/jcajce/JceChaCha20Poly1305.java
        this.cipherKey = new SecretKeySpec(key, keyOff, keyLen, "ChaCha7539");
        mac.init(new SecretKeySpec(firstBlock, 0, 32, "Poly1305"));
./145_rtyley_spongycastle/tls/src/main/java/org/spongycastle/tls/crypto/impl/jcajce/JceTlsHMAC.java
            hmac.init(new SecretKeySpec(key, keyOff, keyLen, algorithm));
./145_rtyley_spongycastle/tls/src/main/java/org/spongycastle/tls/crypto/impl/jcajce/JceTlsMAC.java
            mac.init(new SecretKeySpec(key, keyOff, keyLen, algorithm));
./145_rtyley_spongycastle/tls/src/main/java/org/spongycastle/tls/crypto/impl/jcajce/JceTlsSecret.java
        mac.init(new SecretKeySpec(secret, secretOff, secretLen, macName));
./147_freeotp_freeotp-android/app/src/main/java/org/fedorahosted/freeotp/Token.java
            mac.init(new SecretKeySpec(secret, "Hmac" + algo));
./149_simbiose_encryption/Encryption/main/se/simbio/encryption/Encryption.java
        return new SecretKeySpec(tmp.getEncoded(), mBuilder.getKeyAlgorithm());
./150_kunzisoft_keepassdx/app/src/androidTest/java/com/kunzisoft/keepass/tests/crypto/AESTest.java
		SecretKeySpec key = new SecretKeySpec(keyArray, "AES");
./150_kunzisoft_keepassdx/app/src/main/java/com/kunzisoft/keepass/crypto/engine/AesEngine.java
        cipher.init(opmode, new SecretKeySpec(key, "AES"), new IvParameterSpec(IV));
./150_kunzisoft_keepassdx/app/src/main/java/com/kunzisoft/keepass/crypto/engine/ChaCha20Engine.java
        cipher.init(opmode, new SecretKeySpec(key, "ChaCha7539"), new IvParameterSpec(IV));
./150_kunzisoft_keepassdx/app/src/main/java/com/kunzisoft/keepass/crypto/engine/TwofishEngine.java
        cipher.init(opmode, new SecretKeySpec(key, "AES"), new IvParameterSpec(IV));
./150_kunzisoft_keepassdx/app/src/main/java/com/kunzisoft/keepass/crypto/finalkey/AndroidFinalKey.java
			cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(pKeySeed, "AES"));
./150_kunzisoft_keepassdx/app/src/main/java/com/kunzisoft/keepass/database/load/ImporterV3.java
			cipher.init( Cipher.DECRYPT_MODE, new SecretKeySpec( databaseToOpen.getFinalKey(), "AES" ), new IvParameterSpec( hdr.encryptionIV ) );
./150_kunzisoft_keepassdx/app/src/main/java/com/kunzisoft/keepass/database/PwDbHeaderV4.java
			SecretKeySpec signingKey = new SecretKeySpec(blockKey, "HmacSHA256");
./150_kunzisoft_keepassdx/app/src/main/java/com/kunzisoft/keepass/database/save/PwDbHeaderOutputV4.java
			SecretKeySpec signingKey = new SecretKeySpec(HmacBlockStream.GetHmacKey64(db.getHmacKey(), Types.ULONG_MAX_VALUE), "HmacSHA256");
./150_kunzisoft_keepassdx/app/src/main/java/com/kunzisoft/keepass/database/save/PwDbV3Output.java
			cipher.init( Cipher.ENCRYPT_MODE, new SecretKeySpec(finalKey, "AES" ), new IvParameterSpec(header.encryptionIV) );
./150_kunzisoft_keepassdx/app/src/main/java/com/kunzisoft/keepass/stream/HmacBlockInputStream.java
                SecretKeySpec signingKey = new SecretKeySpec(blockKey, "HmacSHA256");
./150_kunzisoft_keepassdx/app/src/main/java/com/kunzisoft/keepass/stream/HmacBlockOutputStream.java
            SecretKeySpec signingKey = new SecretKeySpec(blockKey, "HmacSHA256");
./152_javiersantos_piracychecker/library/src/main/java/com/github/javiersantos/licensing/AESObfuscator.java
            SecretKey secret = new SecretKeySpec(tmp.getEncoded(), "AES");
./156_megatronking_stringfog/stringfog-ext/aes-cbc/src/main/java/com/github/megatronking/stringfog/aescbc/StringFogImpl.java
                SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(CHARSET_NAME_UTF_8), AES_ALGORITHM);
                SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(CHARSET_NAME_UTF_8), AES_ALGORITHM);
./157_iammehedi_secured-preference-store/securedpreferencestore/src/main/java/devliving/online/securedpreferencestore/EncryptionManager.java
            return new SecretKeySpec(keyData, "AES");
            return new SecretKeySpec(keyData, MAC_CIPHER);
./160_google_google-authenticator-android/AuthenticatorApp/src/androidTest/java/com/google/android/apps/authenticator/PasscodeGeneratorTest.java
    mac1.init(new SecretKeySpec(KEYBYTES1, ""));
    mac2.init(new SecretKeySpec(KEYBYTES2, ""));
./160_google_google-authenticator-android/AuthenticatorApp/src/main/java/com/google/android/apps/authenticator/AccountDb.java
      mac.init(new SecretKeySpec(keyBytes, ""));
./160_google_google-authenticator-android/AuthenticatorApp/src/main/java/com/google/android/apps/authenticator/CheckCodeActivity.java
    mac.init(new SecretKeySpec(keyBytes, ""));
./161_zeapo_android-password-store/app/src/main/java/com/zeapo/pwdstore/utils/Otp.java
        SecretKeySpec signingKey = new SecretKeySpec(BASE_32.decode(secret), ALGORITHM);
./162_rehacktive_waspdb/waspdb/src/main/java/net/rehacktive/waspdb/internals/collision/CipherManager.java
        key = new SecretKeySpec(secretKey.getEncoded(), secretKeyAlgorithm);
./163_philippc_keepass2android/src/java/KP2AKdbLibrary/src/com/keepassdroid/crypto/CipherFactory.java
			cipher.init(opmode, new SecretKeySpec(key, "AES"), new IvParameterSpec(IV));
./163_philippc_keepass2android/src/java/KP2AKdbLibrary/src/com/keepassdroid/crypto/finalkey/AndroidFinalKey.java
			cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(pKeySeed, "AES"));
./163_philippc_keepass2android/src/java/KP2AKdbLibrary/src/com/keepassdroid/database/load/ImporterV3.java
			cipher.init( Cipher.DECRYPT_MODE, new SecretKeySpec( newManager.finalKey, "AES" ), new IvParameterSpec( hdr.encryptionIV ) );
./163_philippc_keepass2android/src/java/KP2AKdbLibrary/src/com/keepassdroid/database/save/PwDbV3Output.java
			cipher.init( Cipher.ENCRYPT_MODE, new SecretKeySpec(finalKey, "AES" ), new IvParameterSpec(header.encryptionIV) );
./163_philippc_keepass2android/src/java/KP2AKdbLibrary/src/org/bouncycastle/jce/provider/WrapCipherSpi.java
            return new SecretKeySpec(encoded, wrappedKeyAlgorithm);
./163_philippc_keepass2android/src/java/kp2akeytransform/src/com/keepassdroid/crypto/finalkey/AndroidFinalKey.java
			cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(pKeySeed, "AES"));
./164_bpellin_keepassdroid/app/src/androidTest/java/com/keepassdroid/tests/crypto/AESTest.java
		SecretKeySpec key = new SecretKeySpec(keyArray, "AES");
./164_bpellin_keepassdroid/app/src/main/java/com/keepassdroid/crypto/CipherFactory.java
./164_bpellin_keepassdroid/app/src/main/java/com/keepassdroid/crypto/engine/AesEngine.java
        cipher.init(opmode, new SecretKeySpec(key, "AES"), new IvParameterSpec(IV));
./164_bpellin_keepassdroid/app/src/main/java/com/keepassdroid/crypto/engine/ChaCha20Engine.java
        cipher.init(opmode, new SecretKeySpec(key, "ChaCha7539"), new IvParameterSpec(IV));
./164_bpellin_keepassdroid/app/src/main/java/com/keepassdroid/crypto/engine/TwofishEngine.java
        cipher.init(opmode, new SecretKeySpec(key, "AES"), new IvParameterSpec(IV));
./164_bpellin_keepassdroid/app/src/main/java/com/keepassdroid/crypto/finalkey/AndroidFinalKey.java
			cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(pKeySeed, "AES"));
./164_bpellin_keepassdroid/app/src/main/java/com/keepassdroid/database/load/ImporterV3.java
			cipher.init( Cipher.DECRYPT_MODE, new SecretKeySpec( newManager.finalKey, "AES" ), new IvParameterSpec( hdr.encryptionIV ) );
./164_bpellin_keepassdroid/app/src/main/java/com/keepassdroid/database/PwDbHeaderV4.java
			SecretKeySpec signingKey = new SecretKeySpec(blockKey, "HmacSHA256");
./164_bpellin_keepassdroid/app/src/main/java/com/keepassdroid/database/save/PwDbHeaderOutputV4.java
			SecretKeySpec signingKey = new SecretKeySpec(HmacBlockStream.GetHmacKey64(db.hmacKey, Types.ULONG_MAX_VALUE), "HmacSHA256");
./164_bpellin_keepassdroid/app/src/main/java/com/keepassdroid/database/save/PwDbV3Output.java
			cipher.init( Cipher.ENCRYPT_MODE, new SecretKeySpec(finalKey, "AES" ), new IvParameterSpec(header.encryptionIV) );
./164_bpellin_keepassdroid/app/src/main/java/com/keepassdroid/database/security/ProtectedBinary.java
			keySpec = new SecretKeySpec(key, "AES");
./164_bpellin_keepassdroid/app/src/main/java/com/keepassdroid/stream/HmacBlockInputStream.java
                SecretKeySpec signingKey = new SecretKeySpec(blockKey, "HmacSHA256");
./164_bpellin_keepassdroid/app/src/main/java/com/keepassdroid/stream/HmacBlockOutputStream.java
            SecretKeySpec signingKey = new SecretKeySpec(blockKey, "HmacSHA256");
./165_andotp_andotp/app/src/androidTest/java/org/shadowice/flocke/andotp/ApplicationTest.java
                SecretKeySpec k = new SecretKeySpec(new Hex().decode(testCase[0].getBytes()), "AES");
./165_andotp_andotp/app/src/main/java/org/shadowice/flocke/andotp/Utilities/EncryptionHelper.java
        return new SecretKeySpec(data, 0, data.length, "AES");
        return new SecretKeySpec(sha.digest(password.getBytes(StandardCharsets.UTF_8)), "AES");
            final SecretKey key = new SecretKeySpec(raw, "AES");
./165_andotp_andotp/app/src/main/java/org/shadowice/flocke/andotp/Utilities/TokenCalculator.java
        mac.init(new SecretKeySpec(key, algo));
./166_find-sec-bugs_find-sec-bugs/plugin/src/test/java/testcode/crypto/iv/StaticIvDecrypt.java
./166_find-sec-bugs_find-sec-bugs/plugin/src/test/java/testcode/crypto/NullCipherUse.java
        SecretKeySpec key = new SecretKeySpec(passkey, "AES");
./166_find-sec-bugs_find-sec-bugs/plugin/src/test/java/testcode/googlemaps/GoogleMapsSigUtil.java
        SecretKeySpec sha1Key = new SecretKeySpec(key, "HmacSHA1");
./166_find-sec-bugs_find-sec-bugs/plugin/src/test/java/testcode/googlemaps/UrlSigner.java
        SecretKeySpec sha1Key = new SecretKeySpec(key, "HmacSHA1");
./166_find-sec-bugs_find-sec-bugs/plugin/src/test/java/testcode/password/ConstantPasswords.java
        new SecretKeySpec(key, "alg");
        new SecretKeySpec(key, 0, 0, "alg");
        new SecretKeySpec(key, "alg");
        new SecretKeySpec(key.getBytes(), "AES"); // should not report
./167_guardianproject_chatsecureandroid/src/info/guardianproject/otr/AES_256_CBC.java
            SecretKeySpec key = new SecretKeySpec(keyAndIV[INDEX_KEY], "AES");
./167_guardianproject_chatsecureandroid/src/net/java/otr4j/crypto/OtrCryptoEngineImpl.java
        SecretKeySpec keyspec = new SecretKeySpec(key, "HmacSHA256");
            SecretKeySpec keyspec = new SecretKeySpec(key, "HmacSHA1");
./168_silenceim_silence/src/org/smssecure/smssecure/crypto/AsymmetricMasterCipher.java
    return new SecretKeySpec(macKeyBytes, "HmacSHA1");
    return new SecretKeySpec(cipherKeyBytes, "AES");
      mac.init(new SecretKeySpec(secretBytes, "HmacSHA256"));
./168_silenceim_silence/src/org/smssecure/smssecure/crypto/AttachmentCipherInputStream.java
      mac.init(new SecretKeySpec(parts[1], "HmacSHA256"));
      this.cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(parts[0], "AES"), new IvParameterSpec(iv));
./168_silenceim_silence/src/org/smssecure/smssecure/crypto/DecryptingPartInputStream.java
./168_silenceim_silence/src/org/smssecure/smssecure/crypto/EncryptingPartOutputStream.java
./168_silenceim_silence/src/org/smssecure/smssecure/crypto/MasterCipher.java
./168_silenceim_silence/src/org/smssecure/smssecure/crypto/MasterSecret.java
    this.encryptionKey = new SecretKeySpec(encryptionKeyBytes, "AES");
    this.macKey        = new SecretKeySpec(macKeyBytes, "HmacSHA1");
./168_silenceim_silence/src/org/smssecure/smssecure/crypto/MasterSecretUtil.java
      return new MasterSecret(new SecretKeySpec(encryptionSecret, "AES"),
                              new SecretKeySpec(macSecret, "HmacSHA1"));
      return new MasterSecret(new SecretKeySpec(encryptionSecret, "AES"),
                              new SecretKeySpec(macSecret, "HmacSHA1"));
    SecretKeySpec hmacKey = new SecretKeySpec(pbkdf2, "HmacSHA1");
./168_silenceim_silence/test/unitTest/java/org/smssecure/smssecure/BaseUnitTest.java
    masterSecret = new MasterSecret(new SecretKeySpec(new byte[16], "AES"),
                                    new SecretKeySpec(new byte[16], "HmacSHA1"));
./169_telegram-foss-team_telegram-foss/TMessagesProj/src/main/java/com/google/android/exoplayer2/source/hls/Aes128DataSource.java
    Key cipherKey = new SecretKeySpec(encryptionKey, "AES");
./169_telegram-foss-team_telegram-foss/TMessagesProj/src/main/java/com/google/android/exoplayer2/upstream/cache/CachedContentIndex.java
        secretKeySpec = new SecretKeySpec(secretKey, "AES");
./169_telegram-foss-team_telegram-foss/TMessagesProj/src/main/java/com/google/android/exoplayer2/upstream/crypto/AesFlushingCipher.java
          new SecretKeySpec(secretKey, Util.splitAtFirst(cipher.getAlgorithm(), "/")[0]),
./170_charlieandroiddev_instagram4android/app/src/main/java/dev/niekirk/com/instagram4android/util/InstagramHashUtil.java
        SecretKeySpec object = new SecretKeySpec(key.getBytes(), "HmacSHA256");
./171_fossasia_loklak_wok_android/app/src/main/java/org/loklak/wok/api/twitter/TwitterOAuthInterceptor.java
        SecretKeySpec keySpec = new SecretKeySpec(signingKey.getBytes(), "HmacSHA1");
./173_fetlife_android/FetLife/fetlife/src/main/java/com/bitlove/fetlife/model/service/FetLifeApiIntentService.java
            SecretKey secret = new SecretKeySpec(key, "AES");
./175_klinker24_talon-for-twitter-android/app/src/main/java/com/klinker/android/twitter_l/utils/api_helper/APIHelper.java
            spec = new SecretKeySpec(oauthSignature.getBytes(), "HmacSHA1");
./177_signalapp_libsignal-service-java/java/src/main/java/org/whispersystems/signalservice/api/crypto/AttachmentCipherInputStream.java
      mac.init(new SecretKeySpec(parts[1], "HmacSHA256"));
      this.cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(cipherKey, "AES"), new IvParameterSpec(iv));
./177_signalapp_libsignal-service-java/java/src/main/java/org/whispersystems/signalservice/api/crypto/AttachmentCipherOutputStream.java
      this.cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(keyParts[0], "AES"));
      this.mac.init(new SecretKeySpec(keyParts[1], "HmacSHA256"));
./177_signalapp_libsignal-service-java/java/src/main/java/org/whispersystems/signalservice/api/crypto/ProfileCipher.java
      mac.init(new SecretKeySpec(unidentifiedAccessKey, "HmacSHA256"));
./177_signalapp_libsignal-service-java/java/src/main/java/org/whispersystems/signalservice/api/messages/SignalServiceEnvelope.java
    return new SecretKeySpec(cipherKey, "AES");
    return new SecretKeySpec(macKey, "HmacSHA256");
./177_signalapp_libsignal-service-java/java/src/main/java/org/whispersystems/signalservice/internal/crypto/ProvisioningCipher.java
      cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key, "AES"));
      mac.init(new SecretKeySpec(key, "HmacSHA256"));
./179_surespot_android/libs/androidkeystore/src/main/java/org/nick/androidkeystore/KeystoreActivity.java
                SecretKeySpec key = new SecretKeySpec(keyBytes, "AES");
./179_surespot_android/surespot/src/main/java/com/twofours/surespot/encryption/EncryptionController.java
                    SecretKey key = new SecretKeySpec(SurespotApplication.getCachingService(context).getSharedSecret(ourUsername, ourVersion, theirUsername, theirVersion, true), 0,
                    SecretKey key = new SecretKeySpec(SurespotApplication.getCachingService(context).getSharedSecret(ourUsername, ourVersion, theirUsername, theirVersion, true), 0,
                    SecretKey key = new SecretKeySpec(SurespotApplication.getCachingService(context).getSharedSecret(ourUsername, ourVersion, theirUsername, theirVersion, hashed), 0,
./181_zom_zom-android/app/src/main/java/info/guardianproject/cacheword/PassphraseSecretsImpl.java
            return new SecretKeySpec(factory.generateSecret(x_spec).getEncoded(), "AES");
./181_zom_zom-android/app/src/main/java/info/guardianproject/cacheword/PassphraseSecrets.java
        mSecretKey = new SecretKeySpec(key, "AES");
./181_zom_zom-android/app/src/main/java/info/guardianproject/cacheword/Wiper.java
./182_signalapp_signal-android/src/org/thoughtcrime/securesms/backup/FullBackupExporter.java
        mac.init(new SecretKeySpec(macKey, "HmacSHA256"));
        cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(cipherKey, "AES"), new IvParameterSpec(iv));
        cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(cipherKey, "AES"), new IvParameterSpec(iv));
./182_signalapp_signal-android/src/org/thoughtcrime/securesms/backup/FullBackupImporter.java
        this.mac.init(new SecretKeySpec(macKey, "HmacSHA256"));
        cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(cipherKey, "AES"), new IvParameterSpec(iv));
        cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(cipherKey, "AES"), new IvParameterSpec(iv));
./182_signalapp_signal-android/src/org/thoughtcrime/securesms/crypto/AsymmetricMasterCipher.java
    return new SecretKeySpec(macKeyBytes, "HmacSHA1");
    return new SecretKeySpec(cipherKeyBytes, "AES");
      mac.init(new SecretKeySpec(secretBytes, "HmacSHA256"));
./182_signalapp_signal-android/src/org/thoughtcrime/securesms/crypto/ClassicDecryptingPartInputStream.java
      cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(attachmentSecret.getClassicCipherKey(), "AES"), iv);
    Mac             mac        = initializeMac(new SecretKeySpec(attachmentSecret.getClassicMacKey(), "HmacSHA1"));
./182_signalapp_signal-android/src/org/thoughtcrime/securesms/crypto/MasterCipher.java
./182_signalapp_signal-android/src/org/thoughtcrime/securesms/crypto/MasterSecret.java
    this.encryptionKey = new SecretKeySpec(encryptionKeyBytes, "AES");
    this.macKey        = new SecretKeySpec(macKeyBytes, "HmacSHA1");
./182_signalapp_signal-android/src/org/thoughtcrime/securesms/crypto/MasterSecretUtil.java
      return new MasterSecret(new SecretKeySpec(encryptionSecret, "AES"),
                              new SecretKeySpec(macSecret, "HmacSHA1"));
      return new MasterSecret(new SecretKeySpec(encryptionSecret, "AES"),
                              new SecretKeySpec(macSecret, "HmacSHA1"));
    SecretKeySpec hmacKey = new SecretKeySpec(pbkdf2, "HmacSHA1");
./182_signalapp_signal-android/src/org/thoughtcrime/securesms/crypto/ModernDecryptingPartInputStream.java
      mac.init(new SecretKeySpec(attachmentSecret.getModernKey(), "HmacSHA256"));
      cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key, "AES"), new IvParameterSpec(iv));
./182_signalapp_signal-android/src/org/thoughtcrime/securesms/crypto/ModernEncryptingPartOutputStream.java
      mac.init(new SecretKeySpec(attachmentSecret.getModernKey(), "HmacSHA256"));
      cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key, "AES"), new IvParameterSpec(iv));
./182_signalapp_signal-android/src/org/thoughtcrime/securesms/database/loaders/DeviceListLoader.java
      mac.init(new SecretKeySpec(masterSecret, "HmacSHA256"));
      mac.init(new SecretKeySpec(cipherKeyPart1, "HmacSHA256"));
      cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(cipherKey, "AES"), new IvParameterSpec(new byte[16]));
      mac.init(new SecretKeySpec(masterSecret, "HmacSHA256"));
      mac.init(new SecretKeySpec(verificationPart1, "HmacSHA256"));
./182_signalapp_signal-android/src/org/thoughtcrime/securesms/glide/cache/EncryptedCoder.java
      mac.init(new SecretKeySpec(masterKey, "HmacSHA256"));
      cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key, "AES"), new IvParameterSpec(iv));
      mac.init(new SecretKeySpec(masterKey, "HmacSHA256"));
      cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key, "AES"), new IvParameterSpec(iv));
./182_signalapp_signal-android/src/org/thoughtcrime/securesms/logging/LogFile.java
        cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(secret, "AES"), new IvParameterSpec(ivBuffer));
          cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(secret, "AES"), new IvParameterSpec(ivBuffer));
./184_mpusher_mpush/mpush-common/src/main/java/com/mpush/common/security/AesCipher.java
        this.keySpec = new SecretKeySpec(key, KEY_ALGORITHM);
./184_mpusher_mpush/mpush-tools/src/main/java/com/mpush/tools/crypto/AESUtils.java
        SecretKeySpec key = new SecretKeySpec(encryptKey, KEY_ALGORITHM);
        SecretKeySpec key = new SecretKeySpec(decryptKey, KEY_ALGORITHM);
./184_mpusher_mpush/mpush-tools/src/main/java/com/mpush/tools/crypto/MD5Utils.java
        SecretKeySpec signingKey = new SecretKeySpec(encryptKey.getBytes(Constants.UTF_8), HMAC_SHA1);
./186_applozic_applozic-android-sdk/mobicommons/src/main/java/com/applozic/mobicommons/encryption/EncryptionUtils.java
        Key key = new SecretKeySpec(ketString.getBytes(), ALGORITHM_AES);
./187_drklo_telegram/TMessagesProj/src/main/java/com/google/android/exoplayer2/source/hls/Aes128DataSource.java
    Key cipherKey = new SecretKeySpec(encryptionKey, "AES");
./187_drklo_telegram/TMessagesProj/src/main/java/com/google/android/exoplayer2/upstream/cache/CachedContentIndex.java
        secretKeySpec = new SecretKeySpec(secretKey, "AES");
./187_drklo_telegram/TMessagesProj/src/main/java/com/google/android/exoplayer2/upstream/crypto/AesFlushingCipher.java
          new SecretKeySpec(secretKey, Util.splitAtFirst(cipher.getAlgorithm(), "/")[0]),
./188_siacs_conversations/src/conversations/java/eu/siacs/conversations/services/ImportBackupService.java
            SecretKeySpec keySpec = new SecretKeySpec(key, KEYTYPE);
./188_siacs_conversations/src/main/java/eu/siacs/conversations/crypto/axolotl/XmppAxolotlMessage.java
			SecretKey secretKey = new SecretKeySpec(innerKey, KEYTYPE);
				SecretKeySpec keySpec = new SecretKeySpec(key, KEYTYPE);
./188_siacs_conversations/src/main/java/eu/siacs/conversations/services/AbstractConnectionManager.java
            SecretKeySpec keySpec = new SecretKeySpec(file.getKey(), KEYTYPE);
            SecretKeySpec keySpec = new SecretKeySpec(file.getKey(), KEYTYPE);
./188_siacs_conversations/src/main/java/eu/siacs/conversations/services/ExportBackupService.java
                SecretKeySpec keySpec = new SecretKeySpec(key, KEYTYPE);
./189_klinker24_talon-twitter-holo/app/src/main/java/com/klinker/android/twitter/utils/api_helper/APIHelper.java
            spec = new SecretKeySpec(oauthSignature.getBytes(), "HmacSHA1");
./189_klinker24_talon-twitter-holo/app/src/main/java/com/klinker/android/twitter/utils/api_helper/TwitterDMPicHelper.java
        secretKey = new SecretKeySpec(keyBytes, "HmacSHA1");
./189_klinker24_talon-twitter-holo/app/src/main/java/com/klinker/android/twitter/utils/api_helper/TwitterMultipleImageHelper.java
        secretKey = new SecretKeySpec(keyBytes, "HmacSHA1");
./189_klinker24_talon-twitter-holo/Other/LocalTrendsProgram/Trends/src/GetLocations.java
        secretKey = new SecretKeySpec(keyBytes, "HmacSHA1");
./191_jackpal_android-terminal-emulator/term/src/main/java/jackpal/androidterm/util/ShortcutEncryption.java
            SecretKey encKey = new SecretKeySpec(decodeBase64(keys[0]), ENC_ALGORITHM);
            SecretKey macKey = new SecretKeySpec(decodeBase64(keys[1]), MAC_ALGORITHM);
./192_tomroush_pdfbox-android/library/src/main/java/com/tom_roush/pdfbox/pdmodel/encryption/SecurityHandler.java
            SecretKey aesKey = new SecretKeySpec(finalKey, "AES");
            SecretKeySpec keySpec = new SecretKeySpec(encryptionKey, "AES");
./192_tomroush_pdfbox-android/library/src/main/java/com/tom_roush/pdfbox/pdmodel/encryption/StandardSecurityHandler.java
            cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(encryptionKey, "AES"));
            cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(hashUE, "AES"),
            cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(hashOE, "AES"),
            cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(hash, "AES"), new IvParameterSpec(new byte[16]));
                SecretKeySpec keySpec = new SecretKeySpec(kFirst, "AES");
./193_connectbot_connectbot/app/src/main/java/org/connectbot/util/Encryptor.java
				new SecretKeySpec(key, KEY_ALGORITHM),
				new SecretKeySpec(key, KEY_ALGORITHM),
./197_iiordanov_remote-desktop-clients/bVNC/src2/main/java/com/iiordanov/bVNC/PasswordManager.java
        SecretKey key = new SecretKeySpec(keyBytes, "AES");
./197_iiordanov_remote-desktop-clients/bVNC/src2/main/java/com/iiordanov/bVNC/RFBSecurityARD.java
            SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
./197_iiordanov_remote-desktop-clients/pubkeyGenerator/src2/main/java/com/iiordanov/pubkeygenerator/Encryptor.java
				new SecretKeySpec(key, KEY_ALGORITHM),
				new SecretKeySpec(key, KEY_ALGORITHM),
./197_iiordanov_remote-desktop-clients/pubkeyGenerator/src2/main/java/com/iiordanov/pubkeygenerator/PubkeyUtils.java
		SecretKeySpec secretKeySpec = new SecretKeySpec(sha256(secret), "AES");
./199_opendatakit_collect/collect_app/src/main/java/org/odk/collect/android/utilities/EncryptionUtils.java
            symmetricKey = new SecretKeySpec(key, SYMMETRIC_ALGORITHM);
./200_nelenkov_android-backup-extractor/src/org/nick/abe/AndroidBackup.java
                        new SecretKeySpec(userKey.getEncoded(), "AES"), ivSpec);
                    c.init(Cipher.DECRYPT_MODE, new SecretKeySpec(mk, "AES"),
        SecretKeySpec masterKeySpec = new SecretKeySpec(masterPw, "AES");
        return new SecretKeySpec(params.getKey(), "AES");
